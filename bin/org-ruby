#!/usr/bin/env ruby
require 'org-ruby'
require 'optparse'

options = {}
options_parser = OptionParser.new do |opts|
  options[:help] = false
  options[:format] = :html

  opts.banner = "Usage: org-ruby <file> [options]"

  opts.on("-h", "--help", "Show this message") do |v|
    options[:help] = true
  end

  opts.on("-d", "--debug", "Run with $DEBUG true") do |v|
    options[:debug] = true
  end

  opts.on("-m", "--markup <file>", "Set Custom Markup file") do |f|
    options[:markup_file] = f
  end

  opts.on("-t", "--translate FORMAT", [:html, :textile, :markdown],
          "Translate the ORG file to the specified format.") do |v|
    options[:format] = v
  end

  opts.on("-v", "--version", "Print version") do |v|
    options[:version] = true
  end

  opts.on("-t", "--title <title>", "Blog output title") do |t|
    options[:title] = t
  end

  opts.on("-p", "--path <path>", "Blog output path") do |p|
    options[:path] = p
  end

end



begin
  options_parser.parse!

  if options[:version]
    puts OrgRuby::VERSION
    exit
  end

  if (ARGV.length == 0) then
    puts options_parser
  else
    data = IO.read(ARGV[0])
    p = Orgmode::Parser.new(data, (options[:markup_file] ? {:markup_file => options[:markup_file]} : {}))
    $DEBUG = true if options[:debug]
    puts p.to_html if options[:format] == :html
    puts p.to_textile if options[:format] == :textile
    if options[:title] != nil
      blog_header = "---
layout: post
title: #{options[:title]}
date: #{Time.now.to_s.split(" ").first(2).join}
typora-root-url: ../../public
typora-copy-images-to: ../../public/images
---\n
"
      File.open(options[:path], 'w+') do |file|
        markdown = p.to_markdown
        markdown = markdown.split("\n\n").map{ |x|
          if x.index("##")
            x
          else
            x.gsub("\n", "")
          end
        }.join("\n\n")
        file.write blog_header + markdown
        puts "finished generate markdown: #{options[:path]} ..."
      end
    elsif options[:format] == :markdown
      puts p.to_markdown
    end
  end
rescue OptionParser::ParseError
  puts options_parser
end
