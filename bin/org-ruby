#!/usr/bin/env ruby
require 'org-ruby'
require 'optparse'

options = {}
options_parser = OptionParser.new do |opts|
  options[:help] = false
  options[:format] = :html

  opts.banner = "Usage: org-ruby <file> [options]"

  opts.on("-h", "--help", "Show this message") do |v|
    options[:help] = true
  end

  opts.on("-d", "--debug", "Run with $DEBUG true") do |v|
    options[:debug] = true
  end

  opts.on("-m", "--markup <file>", "Set Custom Markup file") do |f|
    options[:markup_file] = f
  end

  opts.on("-t", "--translate FORMAT", [:html, :textile, :markdown],
          "Translate the ORG file to the specified format.") do |v|
    options[:format] = v
  end

  opts.on("-v", "--version", "Print version") do |v|
    options[:version] = true
  end

  opts.on("-t", "--title <title>", "Blog output title") do |t|
    options[:title] = t
  end

  opts.on("-p", "--path <path>", "Blog output path") do |p|
    options[:path] = p
  end

  opts.on("-a", "--auto", "Auto generate blog markdown") do |p|
    options[:auto] = true
  end

end

def process_title(buffer)
  title = nil
  path = nil
  buffer.split("\n").each { |line|
    if line.index("#+MD_TITLE") == 0
      title = line.split(":").last.strip
    elsif line.index("#+MD_PATH") == 0
      path = line.split(":").last.strip
    end
  }
  return title, path
end

def process_fill_paragraph(markdown)
  in_src = false
  src_hash = {}
  markdown.split("\n").each do |l|
    if l.index("```")
      if in_src
        in_src = false
      else
        in_src = true
      end
    end
    if in_src
      src_hash[l] = true
    end
  end

  markdown.split("\n\n").map{ |part|
    lines = part.split("\n")
    lines.each_with_index.map{ |x, i|
      l = x.strip
      if l.index("#") == 0 ||
         (i+1 < lines.length &&
          (lines[i+1].strip.index("#") == 0 ||
           lines[i+1].strip.index("*") == 0 ||
           lines[i+1].strip.index("Entered on") == 0)) ||
         src_hash[x]
        x + "\n"
      else
        x
      end
    }.join("")
  }.join("\n\n")
end

def process_image_size(markdown)
  markdown.split("\n").map { |line|
    if line.index(")(=") && line.index("![") == 0
      attrs = line.split("](").last.split(")(=")
      img = attrs.first
      size = attrs.last.gsub(")", '')
      width = size.split("*").first
      height = size.split("*").last
      "<img src=\"#{img}\" width=\"#{width}\" hegiht=\"#{height}\" align=center />"
    else
      line
    end
  }.join("\n")
end

begin
  options_parser.parse!

  if options[:version]
    puts OrgRuby::VERSION
    exit
  end

  if (ARGV.length == 0) then
    puts options_parser
  else
    data = IO.read(ARGV[0])
    p = Orgmode::Parser.new(data, (options[:markup_file] ? {:markup_file => options[:markup_file]} : {}))
    $DEBUG = true if options[:debug]
    puts p.to_html if options[:format] == :html
    puts p.to_textile if options[:format] == :textile
    if options[:title] != nil || options[:auto]
      markdown = p.to_markdown
      title, path = process_title(data)
      title = options[:title] || title
      path = (options[:path] || "/Users/kang/code/chenyukang.github.io/source/_posts/#{path}").strip
      puts "writing: #{path} ..."
      blog_header = "---
layout: post
title: #{title}
date: #{Time.now.to_s.split(" ").first(2).join(" ")}
typora-root-url: ../../public
typora-copy-images-to: ../../public/images
---\n
"

      markdown = process_fill_paragraph(markdown)
      markdown = process_image_size(markdown)
      File.open(path, 'w') do |fp|
        fp.write blog_header + markdown
        puts "finished generate markdown: #{path} ..."
      end
    elsif options[:format] == :markdown
      puts p.to_markdown
    end
  end
rescue OptionParser::ParseError
  puts options_parser
end


